{
  "id": 2,
  "titleDE": "NGINX Frontend und Backend Routing",
  "titleEN": "NGINX frontend and backend routing",
  "descDE": "3 Methoden Frontend und Backend Traffic auf dem selben Server mit NGINX zu routen",
  "descEN": "3 ways to route frontend and backend traffic on the same server with NGINX",
  "date": "2020-08-31T00:00:00.700Z",
  "contentDE": "Viele Webseiten bestehen heutzutage aus mehreren Teilen und Services. Selbst die simpelsten wie [diese](/) bestehen aus einem Frontend Service und einem Backend Service. Diese Services müssen alle über eine Adresse aus dem Internet erreichbar sein, damit die Seite funktionieren kann. Bei kleinen Seiten laufen front und backend oft auf demselben Server und haben daher auch dieselbe IP Adresse. Daher ist eine Zuordnung notwendig, welcher traffic zu welchem Service geleitet werden soll. Mit NGINX ist das leicht möglich und es gibt 3 Methoden das umzusetzen.  \n<br>\n## Voraussetzungen\n<br>\n\n- Für alle 3 Methoden ist eine oder mehrere Domains notwendig bei denen der A Record auf den Server, mit NGINX, gesetzt werden kann und neue Subdomains erstellt werden können.  \n- NGINX ist mit _Server Blocks_ auf dem Server eingerichtet. Eine gute Anleitung dafür gibt es [hier](https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04). Server Blocks werden dabei in _Schritt 5_ erklärt.\n<br><br>\n\n# 1. Verschiedene Pfade für verschiedene Services\n**Frontend Domain:** `example.com/*`  \n**Backend Domain:** `example.com/api/*`  \n<br>\n\nFür diesen Ansatz ist nur eine Domain und ein Server Block in der NGINX config notwendig. Richten Sie für Ihre Domain (hier im Beispiel **example.com**) einen A Record für die Domain selbst und die Subdomain **www.** ein, die auf den Server zeigt. Die Subdomain www. ist notwendig, damit die Seite erreichbar ist, wenn Benutzer diese mit und ohne www. im Browser eingeben.  \n<br>\n\nDen NGINX Serverblock richten sie folgendermaßen ein:\n\n```nginx\nserver {\n        index index.html;\n\n        server_name example.com www.example.com;\n\n        location / {\n                 root /var/www/your_frontend_html_code;\n        }\n\n        location /api {\n                proxy_pass http://127.0.0.1:1234;\n        }\n}\n```\n<br>\n\nIn dem Beispiel wird nun der Traffic der über die Domain example.com bei NGINX ankommt an `/var/www/your_frontend_html_code` weitergeleitet. Mit der Ausnahme von Pfaden auf `/api/*` matchen. Diese werden an einen Service auf localhost, der auf dem Port **1234** läuft, weitergeleitet.  \n<br>  \n\n# 2. Verschiedene Subdomains für verschiede Services\n**Frontend Domain:** `example.com/*`  \n**Backend Domain:** `api.example.com/*`  \n<br>\n\nFür diesen Ansatz ist wieder nur eine Domain notwendig, aber 2 Server Blöcke. Richten sie für Ihre Domain wieder den A Record wie bei Methode 1. ein. Zusätzlich muss eine Subdomain, in diesem Beispiel `api.example.com`, eingerichtet werden mit demselben A Record wie die Hauptdomain.  \n<br>\n\nDie NGINX Serverblöcke sehen folgendermaßen aus:\n```nginx\nserver {\n        index index.html;\n\n        server_name example.com www.example.com;\n\n        location / {\n                 root /var/www/your_frontend_html_code;\n        }\n}\n\nserver {\n\n        location / {\n                proxy_pass http://127.0.0.1:1234;\n        }\n\n        server_name api.example.com www.api.example.com;\n}\n```  \n<br>\n\nIn dem Beispiel wird nun der Traffic der über die Domain example.com bei NGINX ankommt an `/var/www/your_frontend_html_code` weitergeleitet. Auch der Pfad `example.com/api/*`. Der backend Service, der auf Port 1234 läuft ist über die Subdomain `api.example.com/*` erreichbar.  \n<br>\n\n\n# 3. Verschiedene Domains für verschiedene Services\n**Frontend Domain:** `example.com/*`  \n**Backend Domain:** `exampleapi.com/*`  \n<br>\n\nFür den 3ten Ansatz sind 2 Domains und 2 Server Blöcke notwendig.\nEs muss wie in Methode 1. ein A Record eingerichtet werden. Diesmal aber für beide Domains.  \n<br>\n\nDie NGINX Serverblöcke sehen folgendermaßen aus:\n```nginx\nserver {\n        index index.html;\n\n        server_name example.com www.example.com;\n\n        location / {\n                 root /var/www/your_frontend_html_code;\n        }\n}\n\nserver {\n\n        location / {\n                proxy_pass http://127.0.0.1:1234;\n        }\n\n        server_name exampleapi.com www.exampleapi.com;\n}\n```  \nIn dem Beispiel wird nun der Traffic der über die Domain `example.com` bei NGINX ankommt an `/var/www/your_frontend_html_code` weitergeleitet.  \nDer Traffic der über die Domain `exampleapi.com` wird an den backenden Service auf Port 1234 weitergeleitet.\n\n---\n\nWelche der 3 Methoden die richtige ist lässt sich aber nicht pauschal sagen und hängt vom Projekt, der Serverstruktur und dem eigenen Geschmack ab.  \nEs ist auch möglich die Beispiele mit mehr Services zu verwenden. Es müssen nur mehr Domains und Serverblöcke hinzugefügt werden.\n\n<br>\n\n## Technologien\n- **NGINX**   \n\n<br>\n",
  "contentEN": "Many webpages today consist of multiple parts and services. Even simple pages like [this one](/) are using a frontend and backend service. All these services need to be reachable via an address over the internet, for the site to be functional. For small sites the frontend and backend services can run on the same server with the same IP address. If that is the case in your project, it is necessary to route the incoming traffic to the correct service.  \nThere are 3 methods to solve this problem with NGINX.  \n<br>\n## Requirements\n<br>\n\n- Every method needs one or more domains where you are able to create subdomains and set A Records for those domains.\n- NGINX is setup on the server using _Server Blocks_. A good manual to setup a Server with NGINX can be found [here](https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04). Server blocks are explained in _step 5_.  \n<br><br>\n\n# 1. Different paths for different services\n**Frontend Domain:** `example.com/*`  \n**Backend Domain:** `example.com/api/*`  \n<br>\n\nFor this method we only need one domain and one server block in the NGINX config. Setup your domain (here **example.com**) to point the A Record to your server running NGINX and your services. Also, setup a subdomain **www.** with the same A Record. The subdomain is necessary when users try to reach your side using the full domain starting with `www.`  \n<br>\n\nThe NGINX server block looks like this:  \n\n```nginx\nserver {\n        index index.html;\n\n        server_name example.com www.example.com;\n\n        location / {\n                 root /var/www/your_frontend_html_code;\n        }\n\n        location /api {\n                proxy_pass http://127.0.0.1:1234;\n        }\n}\n```\n<br>\n\nIn the example the traffic via the domain example.com will be redirected to `/var/www/your_frontend_html_code`.  \nExcept the traffic matching `/api/*`. That traffic will be redirected to a service running on localhost on port **1234**.  \n\n<br>\n\n# 2. Different subdomains for different services\n**Frontend Domain:** `example.com/*`  \n**Backend Domain:** `api.example.com/*`  \n<br>\n\nFor this method we, again, only need one domain, but we will need 2 server blocks. Setup your Domain again like in method 1. Additionally, we need to setup a subdomain. In this example `api.example.com`. Set the A Record to the same IP as the base domain.  \n<br>\n\nThe NGINX server blocks look like this:  \n```nginx\nserver {\n        index index.html;\n\n        server_name example.com www.example.com;\n\n        location / {\n                 root /var/www/your_frontend_html_code;\n        }\n}\n\nserver {\n\n        location / {\n                proxy_pass http://127.0.0.1:1234;\n        }\n\n        server_name api.example.com www.api.example.com;\n}\n```  \n<br>\n\nIn this example the traffic via example.com is redirected to `/var/www/your_frontend_html_code`. Including the path `example.com/api/*`.  \nThe backend service running on port 1234 is reachable via the subdomain `api.example.com/*`.  \n\n<br>\n\n\n# 3. Different domains for different services\n**Frontend Domain:** `example.com/*`  \n**Backend Domain:** `exampleapi.com/*`  \n<br>\n\nThe third method uses 2 domains and 2 server blocks. You need to setup your domain the same way we did in method 1 but for both domains.\n\n<br>\n\nThe NGINX server blocks look like this:  \n```nginx\nserver {\n        index index.html;\n\n        server_name example.com www.example.com;\n\n        location / {\n                 root /var/www/your_frontend_html_code;\n        }\n}\n\nserver {\n\n        location / {\n                proxy_pass http://127.0.0.1:1234;\n        }\n\n        server_name exampleapi.com www.exampleapi.com;\n}\n```  \n\nIn this example the traffic via `example.com` is redirected to `/var/www/your_frontend_html_code`.  \nThe backend service running on port 1234 is reachable via the second domain `exampleapi.com`.\n\n---\n\nWhich method is the best to use for your project is not that easy to tell. It depends on your project, your server infrastructure and your taste.  \nIt is also possible to use these examples with more services. Just add more server blocks and domains.\n\n<br>\n\n## Technologies\n- **NGINX**   \n\n<br>\n",
  "tags": [
    "NGINX",
    "API",
    "Service",
    "Routing"
  ],
  "projects": []
}
