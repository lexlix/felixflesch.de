{
  "id": 3,
  "titleDE": "Angular Deployment mit NGINX",
  "titleEN": "Angular Deployment with NGINX",
  "descDE": "NGINX Konfiguration für Angular Projekte",
  "descEN": "NGINX config for Angular projects",
  "date": "2020-09-01T00:00:00.700Z",
  "contentDE": "Das Angular Projekt ist fertig fürs Deployment. Wie geht es jetzt weiter? Es sollte, aus Sicherheit und Performance Gründen, auf keinen Fall der in Angular eingebaute Webserver verwendet werden! \n\n![Angular warning message](/assets/img/blog/0003/1.png)\n\nDeshalb verwenden wir NGINX. Zum Deployment sind nur 3 einfache Schritte notwendig:  \n<br>\n\n# 1. Angular Projekt kompilieren\n\nDas Projekt mit folgendem Befehl kompilieren:\n\n```bash\nnpm i\nng build --prod\n```  \n<br>\n\n# 2. Gebauten Code auf production Server kopieren\n\nDer gebaute Code befindet sich im Root Verzeichnis des Projektes unter`dist/PROJEKTNAME`. In dem Ordner befindet sich genau eine .html Datei. Die `index.html`. Diese ist wichtig im späteren Schritt.  \nDer gesamte Ordner muss nun auf den production Server kopiert werden. Ob man das mit `scp` Befehl oder per FTP macht ist dabei egal.  \n<br>\n\n# 3. NGINX Konfiguration\n\n```nginx\nserver {\n    listen 80;\n\n    server_name example.com www.example.com;\n    index index.html;\n    root /your/path/to/your/application/dist/PROJEKTNAME;\n\n    location / {\n        try_files $uri$args $uri$args/ /index.html;\n    }\n}\n```\n\nWir gehen die Bedeutung der einzelnen Zeilen von oben nach unten durch:  \n<br>\n\n`listen 80;` Der NGINX Server bindet unsere Angular Seite an den HTTP Port 80  \n<br>\n\n`index index.html;` Gibt die index Datei, in diesem Fall index.html, an welche geserved wird, wenn keine Datei explizit angegeben wird.  \n<br>  \n\n`server_name example.com www.example.com;` Sagt NGINX nur auf Anfragen zu hören die über die Domain example.com eingehen  \n<br>\n\n`root /your/path/to/your/application/dist/PROJEKTNAME;` Sagt NGINX wo auf dem Server der kompilierte Angular Code liegt  \n<br>\n\n`try_files $uri$args $uri$args/ /index.html;`  \nDiese Zeile ist die Interessanteste der Konfiguration. Sie beschreibt wie mit Anfragen umgegangen werden soll. Um den Sinn der Zeile zu verstehen muss kurz darauf eingegangen werden wie Angular Code kompiliert. Es werden nicht wie bei traditionellen statischen Webseiten fertige .html Dateien ausgeliefert. Es gibt nur eine sehr minimalistische `index.html` Datei, welche alle notwendigen .js und .css Dateien nachlädt. Das heißt damit auch, wenn ein Benutzer auf z.B. `example.com/impressum` zugreifen will, dass diese Datei nicht existiert. Wir wollen aber nicht, dass der Benutzer einen Fehler angezeigt bekommt. Daher sorgt diese Zeile dafür, dass versucht wird die angegebene Datei zu finden (`try_files`). Ist das nicht erfolgreich wird statt eines `404` Fehlers einfach die `index.html` gesendet, welche die Seite lädt und sich um den Rest kümmert.  \n<br>\n\nDas war auch schon die gesamte Konfiguration.  \n\n<br>\n\n## Technologien\n- **NGINX**   \n- **Angular**\n\n<br>\n",
  "contentEN": "The new Angular project is done, and it is time for deployment. How do we continue now? You should never use the built in Angular webserver for deployment! For security and performance reasons.\n\n![Angular warning message](/assets/img/blog/0003/1.png)\n\nThat's why we will use NGINX. For Angular deployment you just need to follow these 3 easy steps:  \n<br>\n\n# 1. Compile Angular project\n\nCompile the Angular project with the following command:\n\n```bash\nnpm i\nng build --prod\n```  \n<br>\n\n# 2. Copy compiled code to production server\n\nThe compiled code is located in the root directory of your project \nin `dist/PROJECTNAME`. This directory contains exactly one .html file. the `index.html` file. This will be important later.  \nThe whole directory needs to be copied to the production server. \nIt does not matter how you upload your code. You could use `scp`, FTP or something else.  \n<br>\n\n# 3. NGINX configuration\n\n```nginx\nserver {\n    listen 80;\n\n    server_name example.com www.example.com;\n    index index.html;\n    root /your/path/to/your/application/dist/PROJECTNAME;\n\n    location / {\n        try_files $uri$args $uri$args/ /index.html;\n    }\n}\n```\n\nWe will go through each line of the configuration:  \n<br>\n\n`listen 80;` The NGINX server binds the Angular Page to the HTTP Port 80  \n<br>\n\n`server_name example.com www.example.com;` Tells NGINX to only listen to requests that are made via the domain example.com  \n<br>\n\n`index index.html;` Describes the index file, in this example index.html, that will be served when no file is explicitly requested.  \n<br>  \n\n`root /your/path/to/your/application/dist/PROJECTNAME;` Tells NGINX the location of the Angular code on the server  \n<br>\n\n`try_files $uri$args $uri$args/ /index.html;`  \nThis is the most interesting line in the configuration. It tells describes how to handle requests. To be able to understand this line I must explain first how Angular compiles code. Angular applications don’t serve premade static .html files. Instead only one very small `index.html` file will be served, which loads all necessary .js .css files. In conclusion that means, that if a user tries to load for example `example.com/imprint`, the file will not exist. We don’t want the user to run into an error.  \nThat’s why this line is trying to find files (`try_files`) matching the url. If that is not successful it will fall back to serving the `index.html` files instead of throwing an `404` error. The `index.html` will handle the url NGINX was unable to find.  \n<br>\n\n\nThat’s all for Angular deployment configuration.\n\n<br>\n\n## Technologies\n- **NGINX**   \n- **Angular**\n\n<br>\n",
  "tags": [
    "NGINX",
    "Angular",
    "Deployment"
  ],
  "projects": []
}
